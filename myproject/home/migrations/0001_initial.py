# Generated by Django 5.1.4 on 2025-02-08 16:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DoctorsProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default='default@example.com', max_length=50, unique=True)),
                ('specialization', models.CharField(max_length=255)),
                ('experience_years', models.IntegerField()),
                ('certificate', models.FileField(upload_to='certificates/')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('hospital', models.CharField(default='Default Hospital', max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('available_days', models.CharField(help_text='Comma-separated list of available days, e.g., Monday, Wednesday, Friday', max_length=100)),
                ('available_time_start', models.TimeField(null=True)),
                ('available_time_end', models.TimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientsProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('phonenumber', models.CharField(max_length=12, null=True)),
                ('is_doctor', models.BooleanField(default=False)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Appointments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('token_number', models.PositiveIntegerField(blank=True, default=1, null=True)),
                ('time_slot', models.TimeField(default='09:00:00')),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=200.0, max_digits=8)),
                ('video_link', models.URLField(blank=True, max_length=225, null=True, unique=True)),
                ('prescription_text', models.TextField(blank=True, null=True)),
                ('prescription_file', models.FileField(blank=True, null=True, upload_to='prescriptions/')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.doctorsprofiles')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.patientsprofiles')),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is Admin')),
                ('is_patient', models.BooleanField(default=False, verbose_name='Is Patient')),
                ('is_doctor', models.BooleanField(default=False, verbose_name='Is Doctor')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='patientsprofiles',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patientsprofile', to='home.users'),
        ),
        migrations.AddField(
            model_name='doctorsprofiles',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctorsprofile', to='home.users'),
        ),
    ]
